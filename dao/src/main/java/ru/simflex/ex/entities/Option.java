package ru.simflex.ex.entities;

import javax.persistence.Entity;
import javax.persistence.GenerationType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Column;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.JoinTable;
import javax.persistence.FetchType;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.Size;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Represents Option entity.
 */
@Entity
@Table(name = "options")
public class Option {

    /**
     * Autogenerated ID.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "option_id")
    private int id;

    /**
     * Name of option.
     */
    @Size(min = 2, max = 30)
    @Column(name = "option_name", nullable = false, unique = true)
    private String name;

    /**
     * Monthly payment for option.
     */
    @Min(value = 0)
    @Max(value = 999)
    @Column(name = "option_monthly_payment", nullable = false)
    private double monthlyPayment;

    /**
     * Option connection price.
     */
    @Min(value = 0)
    @Max(value = 999)
    @Column(name = "option_connection_price", nullable = false)
    private double connectionPrice;

    /**
     * List of incompatible options.
     */
    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(name = "incompatible_options",
            joinColumns = @JoinColumn(name = "first_incompatible_option_id"),
            inverseJoinColumns = @JoinColumn(name = "second_incompatible_option_id")
    )
    private List<Option> incompatibleOptions = new ArrayList<Option>();

    /**
     * List of joint options.
     */
    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(name = "joint_options",
            joinColumns = @JoinColumn(name = "first_option_id"),
            inverseJoinColumns = @JoinColumn(name = "second_option_id")
    )
    private List<Option> jointOptions = new ArrayList<Option>();


    /**
     * Standard POJO getter.
     *
     * @return Id of option
     */
    public int getId() {
        return id;
    }

    /**
     * Standard POJO setter.
     *
     * @param id Id op option
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Standard POJO getter.
     *
     * @return Name of option
     */
    public String getName() {
        return name;
    }

    /**
     * Standard POJO setter.
     *
     * @param name Name of option
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Standard POJO getter.
     *
     * @return Monthly payment for option
     */
    public double getMonthlyPayment() {
        return monthlyPayment;
    }

    /**
     * Standard POJO setter.
     *
     * @param monthlyPayment Monthly payment for option
     */
    public void setMonthlyPayment(double monthlyPayment) {
        this.monthlyPayment = monthlyPayment;
    }

    /**
     * Standard POJO getter.
     *
     * @return Connection price for option.
     */
    public double getConnectionPrice() {
        return connectionPrice;
    }

    /**
     * Standard POJO setter.
     *
     * @param connectionPrice Connection price for option
     */
    public void setConnectionPrice(double connectionPrice) {
        this.connectionPrice = connectionPrice;
    }

    /**
     * Standard POJO getter.
     *
     * @return List of incompatible options.
     */
    public List<Option> getIncompatibleOptions() {
        Set<Option> optionSet = new HashSet<Option>();
        optionSet.addAll(incompatibleOptions);
        incompatibleOptions.clear();
        incompatibleOptions.addAll(optionSet);
        return incompatibleOptions;
    }

    /**
     * Standard POJO setter.
     *
     * @param incompatibleOptions List of incompatible options.
     */
    public void setIncompatibleOptions(List<Option> incompatibleOptions) {
        this.incompatibleOptions = incompatibleOptions;
    }

    /**
     * Standard POJO getter.
     *
     * @return List of joint options.
     */
    public List<Option> getJointOptions() {
        return jointOptions;
    }

    /**
     * Standard POJO setter.
     *
     * @param jointOptions List of joint options.
     */
    public void setJointOptions(List<Option> jointOptions) {
        this.jointOptions = jointOptions;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean equals(Object other) {
        if (this == other) {
            return true;
        }
        if (other == null || getClass() != other.getClass()) {
            return false;
        }

        Option option = (Option) other;
        return this.getId() == option.getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int hashCode() {
        return id * 31;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String toString() {
        return "Option{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", monthlyPayment=" + monthlyPayment +
                ", connectionPrice=" + connectionPrice +
                '}';
    }
}
